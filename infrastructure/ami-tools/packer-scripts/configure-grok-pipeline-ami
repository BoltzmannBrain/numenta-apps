#!/bin/bash
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
#
# This should only contain settings specific to Grok Plumbing AMIs

export PATH="/opt/numenta/anaconda/bin:${PATH}:/usr/local/sbin:/usr/local/bin"
export PYTHONPATH="${PYTHONPATH}:/opt/numenta/products"

source /etc/grok/supervisord.vars
export PATH="/opt/rh/devtoolset-2/root/usr/bin:${PATH}"
export PYTHONPATH="${PYTHONPATH}:/opt/numenta/products"

echo "Marking instance as being an AMI build..."
AMIBUILD_LOCK=/tmp/baking-ami
touch "${AMIBUILD_LOCK}"

complain() {
  echo "$@"
  logger -t ami-bake "$@"
}

splat() {
  # Make it easier to distinguish phases of the script in the scrollback
  echo "


.                                    ######
.                                  ##########
.                                 ############
.                                ##############
.                                ##############
.                                ##############
.                                 ############
.                                  ##########
.                                    ######


  "
}

install-prerequisites-and-update-repos() {
  splat
  mkdir -p /etc/grok

  echo "Engraving products SHA and build timestamp into AMI"
  cp /tmp/products.sha /etc/grok/ami-operations.sha
  date > /etc/grok/ami-bake.time
  rm -f /tmp/products.sha /tmp/build.time

  echo "Purging old grok repo file..."
  rm -f /etc/yum.repos.d/grok.repo

  echo "Cleaning up stale yum data..."
  yum clean all

  echo "Ensure Numenta S3 repos are current..."
  for repo in grok-development.repo \
              grok-release-candidates.repo \
              grok-releases.repo \
              nta-carbonite.repo \
              nta-thirdparty.repo
  do
    echo "Installing ${repo}..."
    mv "/tmp/${repo}" /etc/yum.repos.d
  done
  yum makecache
  yum repolist

  yum remove -y numenta-infrastructure-common grok-updater
  yum install -y numenta-infrastructure-python
}

run-salt() {
  splat
  echo "Configuring Salt minion_id"
  echo
  echo "Setting Salt minion_id to grok-server"
  echo grok-server > /etc/salt/minion_id

  yum install -y grok-saltcellar

  # We need to install grok-private-settings to get WUFOO and S3 configuration
  # information
  yum install -y grok-private-settings

  # Make sure /opt/numenta/grok is absent so we can create a symlink later.
  rm -fr /opt/numenta/grok

  echo "Running Salt..."
  run-salt-solo | tee /tmp/saltrun.log
  saltcode=$?
  echo
  echo "post run-salt-solo"
  if [ "${saltcode}" != 0 ]; then
    echo "Salt failed with exit code ${saltcode}"
    grep -i fail /tmp/saltrun.log
    exit "${saltcode}"
  fi
  rm -f /tmp/saltrun.log
}

install-grok() {
  splat
  echo "Installing Grok..."
  echo "installing grok-manifest.json"
  mv /tmp/grok-manifest.json /etc/grok/grok-manifest.json

  # We don't want to pollute the releases repository with non-release RPMs,
  # so tell install-grok-packages to use the x86_64 repo.
  install-grok-packages --log-level debug \
    --repository x86_64 \
    --configuration-file /etc/grok/grok-manifest.json
  grok_install_code=$?
  if [ $grok_install_code != 0 ]; then
    echo "Grok install failed with exit code ${grok_install_code}"
    exit "${grok_install_code}"
  fi

  # Hotfix the uwsgi error
  pushd /opt/numenta/grok
  pip install uwsgi --upgrade
  if [ $? != 0 ]; then
    echo "uwsgi install/upgrade failed"
    exit 1
  fi
  popd
}

start-grok() {
  splat
  echo "Starting grok services..."
  service grokservices start
  if [ $? != 0 ]; then
    echo "grokservices start failed"
    exit 1
  fi
}


install-prerequisites-and-update-repos
run-salt
install-grok
start-grok
