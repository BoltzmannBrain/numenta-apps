#!/usr/bin/env python
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

"""Delete specified companies from Taurus Collector and Taurus Engine."""

import argparse
import logging
import os

from taurus.metric_collectors import logging_support
from taurus.metric_collectors import metric_utils



g_log = logging.getLogger(__name__)



def _parseArgs():
  """Parse command-line arguments

  :returns: the args object generated by ``argparse.ArgumentParser.parse_args``
    with the following attributes:
      tickerSymbols: The company stock ticker symbol(s);
      engineServer: Hostname or IP addr of server running Taurus's HTM Engine
        API;
      engineApiKey: API Key of Taurus's HTM Engine;
      suppressWarning: True to suppress destruction action warning prompt

  """
  parser = argparse.ArgumentParser(
    description=(
      "Delete specified companies from Taurus Collector and its metrics/models "
      "from Taurus Engine. "
      "NOTE1: as a precaution, the script will abort if the company's ticker "
      "symbol still appears in the collector's metrics configuration."))

  parser.add_argument(
    "--symbols",
    required=True,
    dest="tickerSymbols",
    metavar="S",
    nargs="+",
    help=("Stock ticker symbols identifying the companies to delete; "
          "e.g., WAG ACT T GOOG"))

  parser.add_argument(
    "--engine",
    required=True,
    dest="engineServer",
    metavar="TAURUS_ENGINE_SERVER",
    help=("Hostname or IP address of server running Taurus HTM Engine API to "
          "delete metrics/models."))

  parser.add_argument(
    "--suppress-destructive-action-warning-prompt",
    action="store_true",
    dest="suppressWarning",
    help=("Specify this option to suppress warning prompt. For automation."))

  parser.add_argument(
    "--engine-apikey",
    required=True,
    dest="engineApiKey",
    metavar="TAURUS_ENGINE_API_KEY",
    help="API Key of Taurus HTM Engine")

  args = parser.parse_args()

  if not args.tickerSymbols:
    msg = ("Missing or empty company stock ticker symbols")
    g_log.error(msg)
    parser.error(msg)

  if not args.engineServer:
    msg = ("Missing or empty Hostname or IP address of server running Taurus "
           "HTM Engine API")
    g_log.error(msg)
    parser.error(msg)

  if not args.engineApiKey:
    msg = "Missing or empty API Key of Taurus HTM Engine"
    g_log.error(msg)
    parser.error(msg)

  return args



def main():
  """Console script entry point. Delete companies from Taurus Collector and
  their metrics/models from Taurus Engine.
  """
  logging_support.LoggingSupport.initTool()

  try:
    args = _parseArgs()

    try:
      metric_utils.CompanyDeleter.deleteCompanies(
        tickerSymbols=args.tickerSymbols,
        engineServer=args.engineServer,
        engineApiKey=args.engineApiKey,
        warnAboutDestructiveAction=not args.suppressWarning)
    except (metric_utils.WarningPromptTimeout,
            metric_utils.UserAbortedOperation) as exc:
      g_log.warn("%s", exc)
      os._exit(1)  # pylint: disable=W0212
  except SystemExit as exc:
    if exc.code == 0:
      # probably result of --help
      g_log.debug("Exiting with %r", exc)
    else:
      g_log.error("SystemExit: %r", exc)

    raise
  except:
    g_log.exception("Operation failed.")
    raise



if __name__ == "__main__":
  main()
